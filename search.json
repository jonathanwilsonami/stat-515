[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome!",
    "section": "",
    "text": "Projects\n  \n  \n    \n     About\n  \n\n  \n  \n\nStat 515 Projects Website\nWelcome!"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About Us",
    "section": "",
    "text": "Jonathan Wilson\n\n\n\nI’m an engineer at heart. I grew up working in construction, earned a degree in Applied Statistics and Computer Science from BYU, and have spent more than a decade building software across diverse domains—ranging from DoD satellites (image processing, optimization) and large-scale cybersecurity analytics (petabyte-scale ML) to network engineering, monitoring, and data platforms. Today, my focus is on designing data architectures and pipelines for modeling, simulation, and analysis of large-scale systems. I’m currently pursuing a master’s in Data Analytics Engineering at GMU.\n\n\n\n\n\n\n\nSean\n\n\n\nMy name is Sean Reilly, and I currently work at CyberData Technologies, Inc. as a Business Analyst. I am also a Swim Coach for Streamline Swim Club. I graduated Lafayette College in Spring 2024 with a BS in Math and Minor in Data Science. While at Lafayette College, I was a Division 1 swimmer for all 4 years. I am a detail-oriented problem solver with a strong foundation in data analysis, data modeling, analytical thinking, communication, and collaboration. I had the amazing opportunity to take the position as my community summer swim team’s Head Coach for 3 summers while in college, pursuing a passion of mine, giving back to my community, and developing valuable skills along the way including leadership, interpersonal skills, organizational skills, and written communication."
  },
  {
    "objectID": "about.html#jonathan-wilson",
    "href": "about.html#jonathan-wilson",
    "title": "About Us",
    "section": "",
    "text": "Jonathan Wilson\n\n\n\nI’m an engineer at heart. I grew up working in construction, earned a degree in Applied Statistics and Computer Science from BYU, and have spent more than a decade building software across diverse domains—ranging from DoD satellites (image processing, optimization) and large-scale cybersecurity analytics (petabyte-scale ML) to network engineering, monitoring, and data platforms. Today, my focus is on designing data architectures and pipelines for modeling, simulation, and analysis of large-scale systems. I’m currently pursuing a master’s in Data Analytics Engineering at GMU."
  },
  {
    "objectID": "about.html#sean-reilly",
    "href": "about.html#sean-reilly",
    "title": "About Us",
    "section": "",
    "text": "Sean\n\n\n\nMy name is Sean Reilly, and I currently work at CyberData Technologies, Inc. as a Business Analyst. I am also a Swim Coach for Streamline Swim Club. I graduated Lafayette College in Spring 2024 with a BS in Math and Minor in Data Science. While at Lafayette College, I was a Division 1 swimmer for all 4 years. I am a detail-oriented problem solver with a strong foundation in data analysis, data modeling, analytical thinking, communication, and collaboration. I had the amazing opportunity to take the position as my community summer swim team’s Head Coach for 3 summers while in college, pursuing a passion of mine, giving back to my community, and developing valuable skills along the way including leadership, interpersonal skills, organizational skills, and written communication."
  },
  {
    "objectID": "projects/index.html",
    "href": "projects/index.html",
    "title": "Projects",
    "section": "",
    "text": "A collection of visualization projects—dashboards, interactive charts, and storytelling with data.\n\n\n\n\n\n\n\n\n\n\n\n\nCrime And Poverty Redesign Project CODE\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPossible Relationship Between Poverty & Crime in Dillon County South Carolina\n\n\n\n\n\n\n\n\n\nSep 25, 2025\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "projects/crime-and-poverty-CODE.html",
    "href": "projects/crime-and-poverty-CODE.html",
    "title": "Crime And Poverty Redesign Project CODE",
    "section": "",
    "text": "The following code fetches the data, sets project variables, and creates several helper functions for making charts looker clearer and cleaner. The entire project uses ggplot2, dplyr, tidyr, tidyverse, maps, mapproj, patchwork, scales, plotly, viridisLite, grid, stringr, tibble libraries. Much of the helpfer functions for the maps leverage this site1\n\n# See renv.lock \nlibrary(ggplot2)\nlibrary(dplyr)\n# library(sf)\nlibrary(maps)\n# library(stringr)\nlibrary(tidyr)\nlibrary(tidyverse) \nlibrary(mapproj)\nlibrary(patchwork)\nlibrary(scales)\nlibrary(plotly)\n\n##################################\n# Data Sources \n##################################\nstate &lt;- read.csv(\"data/crime_plus_poverty_2023.csv\")\ncounty &lt;- read.csv(\"data/crime_poverty_by_county_2023.csv\", check.names = FALSE)\n\n##################################\n# Data Cleaning \n##################################\n# Droping rows where census data was not available for 2023 source county data \nif (\"no_population\" %in% names(county)) {\n  county &lt;- county %&gt;% dplyr::filter(no_population != \"true\")\n}\n\ncounty &lt;- county %&gt;%\n  mutate(\n    poverty_rate = as.numeric(poverty_rate),\n    property_crime_per_100k = as.numeric(property_crime_per_100k),\n    violent_crime_per_100k = as.numeric(violent_crime_per_100k)\n  )\n\n##################################\n# Useful functions & Vars\n##################################\ncounty_metric_cols &lt;- c(\"poverty_rate\",\n            \"property_crime_per_100k\",\n            \"violent_crime_per_100k\")\n\n# Create geometries for mapping \nus_counties &lt;- ggplot2::map_data(\"county\")  # long/lat + region (state), subregion (county)\ncounty_key  &lt;- maps::county.fips %&gt;% mutate(polyname = str_to_lower(polyname))\n\ncounties_poly &lt;- us_counties %&gt;%\n  mutate(polyname = paste(region, subregion, sep = \",\")) %&gt;%\n  left_join(county_key, by = \"polyname\") %&gt;%\n  rename(fips = fips) %&gt;%\n  filter(!is.na(fips))\n\n# Function for creating maps\nbuild_county_map &lt;- function(data) {\n  ggplot(data, aes(long, lat, group = group)) +\n    geom_polygon(color = \"gray85\", linewidth = 0.1, na.rm = TRUE) +\n    coord_quickmap() +\n    theme_void(base_size = 12) +\n    theme(\n      legend.position = \"bottom\",\n      plot.title = element_text(face = \"bold\", size = 16),\n      plot.margin = margin(4, 8, 4, 8)\n    )\n}\n\n# Helper to compute sensible upper limits (95th percentile) for crime and poverty rates \np95 &lt;- function(x) {\n  x &lt;- x[is.finite(x)]\n  if (!length(x)) return(NA_real_)\n  as.numeric(quantile(x, 0.95, na.rm = TRUE))\n}\n\n# Derive county FIPS given a data frame\n# Uses: fips OR state+county codes OR state_abbr+county name\nderive_fips &lt;- function(df, county_key = NULL, keep_unmatched = FALSE) {\n  stopifnot(is.data.frame(df))\n\n  finish &lt;- function(out) invisible(if (keep_unmatched) out else dplyr::filter(out, !is.na(.data$fips)))\n\n  # county crosswalk (polyname = \"state,county\" lowercase)\n  if (is.null(county_key)) {\n    county_key &lt;- maps::county.fips |&gt;\n      dplyr::mutate(polyname = stringr::str_to_lower(polyname))\n  }\n\n  # Already has FIPS\n  if (\"fips\" %in% names(df)) {\n    out &lt;- dplyr::mutate(df, fips = stringr::str_pad(as.character(.data$fips), 5, \"0\"))\n    return(finish(out))\n  }\n\n  # state + county numeric/string codes\n  if (all(c(\"state\", \"county\") %in% names(df))) {\n    out &lt;- dplyr::mutate(\n      df,\n      fips = paste0(\n        stringr::str_pad(as.character(.data$state),  2, \"0\"),\n        stringr::str_pad(as.character(.data$county), 3, \"0\")\n      )\n    )\n    return(finish(out))\n  }\n\n  # state_abbr + county name (match via polyname)\n  county_col &lt;- c(\"county_name\", \"county\")[c(\"county_name\", \"county\") %in% names(df)][1]\n  if (!is.na(county_col) && \"state_abbr\" %in% names(df)) {\n    states_lookup &lt;- tibble::tibble(\n      state_abbr = c(state.abb, \"DC\"),\n      state_name = c(state.name, \"District of Columbia\")\n    ) |&gt;\n      dplyr::mutate(state_name_lower = stringr::str_to_lower(state_name))\n\n    norm_county &lt;- function(x) {\n      x |&gt;\n        stringr::str_to_lower() |&gt;\n        stringr::str_replace_all(\"\\\\s+(county|parish|borough|census area|municipality|city)$\", \"\") |&gt; # Regex to extract county name\n        stringr::str_replace_all(\"^st\\\\.?\\\\s\", \"saint \")\n    }\n\n    out &lt;- df |&gt;\n      dplyr::left_join(states_lookup, by = \"state_abbr\") |&gt;\n      dplyr::mutate(polyname = paste(.data$state_name_lower, norm_county(.data[[county_col]]), sep = \",\")) |&gt;\n      dplyr::left_join(county_key, by = \"polyname\")  # adds fips\n    return(finish(out))\n  }\n\n  stop(\"derive_fips(): need one of: 'fips'; 'state'+'county'; or 'state_abbr'+county name.\")\n}\n\n# Used to make the color scale look better \nscale_fill_binned_left &lt;- function(\n  x, # numeric vector used to size bins \n  step, # bin width \n  min_cap = NULL,\n  max_cap = NULL,\n  label_fmt = label_percent(accuracy = 1),\n  name = NULL, # legend title\n  option = \"mako\", begin = 0.15, end = 0.90, direction = -1, # colormap or palette\n  bar_width_mm = 200, bar_height_mm = 12,\n  title_size = 13, label_size = 12,\n  show_separators = TRUE  # draw white separators at bin edges\n) {\n  stopifnot(is.numeric(x), is.numeric(step), step &gt; 0)\n\n  # compute \"nice\" upper bound from p95, then clamp to caps if provided\n  upper_raw &lt;- ceiling(p95(x) / step) * step\n  if (!is.null(min_cap)) upper_raw &lt;- max(min_cap, upper_raw)\n  if (!is.null(max_cap)) upper_raw &lt;- min(max_cap, upper_raw)\n\n  brks &lt;- seq(0, upper_raw, by = step)\n  labs &lt;- paste0(label_fmt(head(brks, -1)), \"–\", label_fmt(tail(brks, -1)))\n  labs &lt;- c(labs, \"\")\n\n  scale_fill_viridis_b(\n    option = option, begin = begin, end = end, direction = direction,\n    limits = range(brks),\n    breaks = brks,\n    labels = labs,\n    oob = scales::squish, na.value = \"gray95\",\n    name = name %||% \"\",\n    guide = guide_colorsteps(\n      title.position = \"top\",\n      label.position = \"top\", # labels above bar\n      label.theme  = element_text(size = label_size, hjust = 0),  # left-justify\n      ticks = show_separators,\n      ticks.colour = if (show_separators) \"white\" else NULL,\n      ticks.linewidth = if (show_separators) 2 else NULL,\n      show.limits = FALSE,\n      barwidth  = grid::unit(bar_width_mm,  \"mm\"),\n      barheight = grid::unit(bar_height_mm, \"mm\"),\n      title.theme = element_text(size = title_size, face = \"bold\",\n                                 margin = margin(b = 4))\n    )\n  )\n}\n\n`%||%` &lt;- function(a, b) if (is.null(a)) b else a\n\n# Formtter for plotly maps \napply_plotly_binned_colorbar &lt;- function(p, brks, labs, palette = \"mako\",\n                                         begin = 0.15, end = 0.90, direction = -1,\n                                         title = \"Legend\", horizontal = TRUE,\n                                         thickness = 28, len = 1, show_separators = TRUE,\n                                         title_font_size = 13, tick_font_size = 12) {\n  cols &lt;- viridisLite::mako(length(brks) - 1, begin = begin, end = end, direction = direction)\n\n  # invisible heatmap solely to carry the colorbar\n  p &lt;- p %&gt;%\n    plotly::add_heatmap(\n      z = matrix(seq(min(brks), max(brks), length.out = 2), nrow = 1),\n      showscale = TRUE,\n      colors = cols,\n      hoverinfo = \"skip\",\n      opacity = 0,\n      xaxis = \"x2\", yaxis = \"y2\"\n    ) %&gt;%\n    plotly::layout(\n      xaxis2 = list(visible = FALSE, domain = c(0, 0.001), anchor = \"y2\", overlaying = \"x\"),\n      yaxis2 = list(visible = FALSE, domain = c(0, 0.001), anchor = \"x2\", overlaying = \"y\")\n    )\n\n  idx &lt;- length(p$x$data)\n  p$x$data[[idx]]$colorbar &lt;- list(\n    title    = list(text = title, side = \"top\", font = list(size = title_font_size)),\n    tickmode = \"array\",\n    tickvals = brks,\n    ticktext = c(labs, \"\"),  # empty label on rightmost edge\n    ticks    = if (show_separators) \"outside\" else \"\",\n    tickcolor = if (show_separators) \"white\" else NULL,\n    tickwidth = if (show_separators) 2 else NULL,\n    tickfont = list(size = tick_font_size),\n    len = len,\n    thickness = thickness\n  )\n  if (horizontal) {\n    p$x$data[[idx]]$colorbar$orientation &lt;- \"h\"\n    p$x$data[[idx]]$colorbar$x &lt;- 0.5\n    p$x$data[[idx]]$colorbar$xanchor &lt;- \"center\"\n    p$x$data[[idx]]$colorbar$y &lt;- -0.22\n  }\n  p\n}"
  },
  {
    "objectID": "projects/crime-and-poverty-CODE.html#loading-libs-and-data",
    "href": "projects/crime-and-poverty-CODE.html#loading-libs-and-data",
    "title": "Crime And Poverty Redesign Project CODE",
    "section": "",
    "text": "The following code fetches the data, sets project variables, and creates several helper functions for making charts looker clearer and cleaner. The entire project uses ggplot2, dplyr, tidyr, tidyverse, maps, mapproj, patchwork, scales, plotly, viridisLite, grid, stringr, tibble libraries. Much of the helpfer functions for the maps leverage this site1\n\n# See renv.lock \nlibrary(ggplot2)\nlibrary(dplyr)\n# library(sf)\nlibrary(maps)\n# library(stringr)\nlibrary(tidyr)\nlibrary(tidyverse) \nlibrary(mapproj)\nlibrary(patchwork)\nlibrary(scales)\nlibrary(plotly)\n\n##################################\n# Data Sources \n##################################\nstate &lt;- read.csv(\"data/crime_plus_poverty_2023.csv\")\ncounty &lt;- read.csv(\"data/crime_poverty_by_county_2023.csv\", check.names = FALSE)\n\n##################################\n# Data Cleaning \n##################################\n# Droping rows where census data was not available for 2023 source county data \nif (\"no_population\" %in% names(county)) {\n  county &lt;- county %&gt;% dplyr::filter(no_population != \"true\")\n}\n\ncounty &lt;- county %&gt;%\n  mutate(\n    poverty_rate = as.numeric(poverty_rate),\n    property_crime_per_100k = as.numeric(property_crime_per_100k),\n    violent_crime_per_100k = as.numeric(violent_crime_per_100k)\n  )\n\n##################################\n# Useful functions & Vars\n##################################\ncounty_metric_cols &lt;- c(\"poverty_rate\",\n            \"property_crime_per_100k\",\n            \"violent_crime_per_100k\")\n\n# Create geometries for mapping \nus_counties &lt;- ggplot2::map_data(\"county\")  # long/lat + region (state), subregion (county)\ncounty_key  &lt;- maps::county.fips %&gt;% mutate(polyname = str_to_lower(polyname))\n\ncounties_poly &lt;- us_counties %&gt;%\n  mutate(polyname = paste(region, subregion, sep = \",\")) %&gt;%\n  left_join(county_key, by = \"polyname\") %&gt;%\n  rename(fips = fips) %&gt;%\n  filter(!is.na(fips))\n\n# Function for creating maps\nbuild_county_map &lt;- function(data) {\n  ggplot(data, aes(long, lat, group = group)) +\n    geom_polygon(color = \"gray85\", linewidth = 0.1, na.rm = TRUE) +\n    coord_quickmap() +\n    theme_void(base_size = 12) +\n    theme(\n      legend.position = \"bottom\",\n      plot.title = element_text(face = \"bold\", size = 16),\n      plot.margin = margin(4, 8, 4, 8)\n    )\n}\n\n# Helper to compute sensible upper limits (95th percentile) for crime and poverty rates \np95 &lt;- function(x) {\n  x &lt;- x[is.finite(x)]\n  if (!length(x)) return(NA_real_)\n  as.numeric(quantile(x, 0.95, na.rm = TRUE))\n}\n\n# Derive county FIPS given a data frame\n# Uses: fips OR state+county codes OR state_abbr+county name\nderive_fips &lt;- function(df, county_key = NULL, keep_unmatched = FALSE) {\n  stopifnot(is.data.frame(df))\n\n  finish &lt;- function(out) invisible(if (keep_unmatched) out else dplyr::filter(out, !is.na(.data$fips)))\n\n  # county crosswalk (polyname = \"state,county\" lowercase)\n  if (is.null(county_key)) {\n    county_key &lt;- maps::county.fips |&gt;\n      dplyr::mutate(polyname = stringr::str_to_lower(polyname))\n  }\n\n  # Already has FIPS\n  if (\"fips\" %in% names(df)) {\n    out &lt;- dplyr::mutate(df, fips = stringr::str_pad(as.character(.data$fips), 5, \"0\"))\n    return(finish(out))\n  }\n\n  # state + county numeric/string codes\n  if (all(c(\"state\", \"county\") %in% names(df))) {\n    out &lt;- dplyr::mutate(\n      df,\n      fips = paste0(\n        stringr::str_pad(as.character(.data$state),  2, \"0\"),\n        stringr::str_pad(as.character(.data$county), 3, \"0\")\n      )\n    )\n    return(finish(out))\n  }\n\n  # state_abbr + county name (match via polyname)\n  county_col &lt;- c(\"county_name\", \"county\")[c(\"county_name\", \"county\") %in% names(df)][1]\n  if (!is.na(county_col) && \"state_abbr\" %in% names(df)) {\n    states_lookup &lt;- tibble::tibble(\n      state_abbr = c(state.abb, \"DC\"),\n      state_name = c(state.name, \"District of Columbia\")\n    ) |&gt;\n      dplyr::mutate(state_name_lower = stringr::str_to_lower(state_name))\n\n    norm_county &lt;- function(x) {\n      x |&gt;\n        stringr::str_to_lower() |&gt;\n        stringr::str_replace_all(\"\\\\s+(county|parish|borough|census area|municipality|city)$\", \"\") |&gt; # Regex to extract county name\n        stringr::str_replace_all(\"^st\\\\.?\\\\s\", \"saint \")\n    }\n\n    out &lt;- df |&gt;\n      dplyr::left_join(states_lookup, by = \"state_abbr\") |&gt;\n      dplyr::mutate(polyname = paste(.data$state_name_lower, norm_county(.data[[county_col]]), sep = \",\")) |&gt;\n      dplyr::left_join(county_key, by = \"polyname\")  # adds fips\n    return(finish(out))\n  }\n\n  stop(\"derive_fips(): need one of: 'fips'; 'state'+'county'; or 'state_abbr'+county name.\")\n}\n\n# Used to make the color scale look better \nscale_fill_binned_left &lt;- function(\n  x, # numeric vector used to size bins \n  step, # bin width \n  min_cap = NULL,\n  max_cap = NULL,\n  label_fmt = label_percent(accuracy = 1),\n  name = NULL, # legend title\n  option = \"mako\", begin = 0.15, end = 0.90, direction = -1, # colormap or palette\n  bar_width_mm = 200, bar_height_mm = 12,\n  title_size = 13, label_size = 12,\n  show_separators = TRUE  # draw white separators at bin edges\n) {\n  stopifnot(is.numeric(x), is.numeric(step), step &gt; 0)\n\n  # compute \"nice\" upper bound from p95, then clamp to caps if provided\n  upper_raw &lt;- ceiling(p95(x) / step) * step\n  if (!is.null(min_cap)) upper_raw &lt;- max(min_cap, upper_raw)\n  if (!is.null(max_cap)) upper_raw &lt;- min(max_cap, upper_raw)\n\n  brks &lt;- seq(0, upper_raw, by = step)\n  labs &lt;- paste0(label_fmt(head(brks, -1)), \"–\", label_fmt(tail(brks, -1)))\n  labs &lt;- c(labs, \"\")\n\n  scale_fill_viridis_b(\n    option = option, begin = begin, end = end, direction = direction,\n    limits = range(brks),\n    breaks = brks,\n    labels = labs,\n    oob = scales::squish, na.value = \"gray95\",\n    name = name %||% \"\",\n    guide = guide_colorsteps(\n      title.position = \"top\",\n      label.position = \"top\", # labels above bar\n      label.theme  = element_text(size = label_size, hjust = 0),  # left-justify\n      ticks = show_separators,\n      ticks.colour = if (show_separators) \"white\" else NULL,\n      ticks.linewidth = if (show_separators) 2 else NULL,\n      show.limits = FALSE,\n      barwidth  = grid::unit(bar_width_mm,  \"mm\"),\n      barheight = grid::unit(bar_height_mm, \"mm\"),\n      title.theme = element_text(size = title_size, face = \"bold\",\n                                 margin = margin(b = 4))\n    )\n  )\n}\n\n`%||%` &lt;- function(a, b) if (is.null(a)) b else a\n\n# Formtter for plotly maps \napply_plotly_binned_colorbar &lt;- function(p, brks, labs, palette = \"mako\",\n                                         begin = 0.15, end = 0.90, direction = -1,\n                                         title = \"Legend\", horizontal = TRUE,\n                                         thickness = 28, len = 1, show_separators = TRUE,\n                                         title_font_size = 13, tick_font_size = 12) {\n  cols &lt;- viridisLite::mako(length(brks) - 1, begin = begin, end = end, direction = direction)\n\n  # invisible heatmap solely to carry the colorbar\n  p &lt;- p %&gt;%\n    plotly::add_heatmap(\n      z = matrix(seq(min(brks), max(brks), length.out = 2), nrow = 1),\n      showscale = TRUE,\n      colors = cols,\n      hoverinfo = \"skip\",\n      opacity = 0,\n      xaxis = \"x2\", yaxis = \"y2\"\n    ) %&gt;%\n    plotly::layout(\n      xaxis2 = list(visible = FALSE, domain = c(0, 0.001), anchor = \"y2\", overlaying = \"x\"),\n      yaxis2 = list(visible = FALSE, domain = c(0, 0.001), anchor = \"x2\", overlaying = \"y\")\n    )\n\n  idx &lt;- length(p$x$data)\n  p$x$data[[idx]]$colorbar &lt;- list(\n    title    = list(text = title, side = \"top\", font = list(size = title_font_size)),\n    tickmode = \"array\",\n    tickvals = brks,\n    ticktext = c(labs, \"\"),  # empty label on rightmost edge\n    ticks    = if (show_separators) \"outside\" else \"\",\n    tickcolor = if (show_separators) \"white\" else NULL,\n    tickwidth = if (show_separators) 2 else NULL,\n    tickfont = list(size = tick_font_size),\n    len = len,\n    thickness = thickness\n  )\n  if (horizontal) {\n    p$x$data[[idx]]$colorbar$orientation &lt;- \"h\"\n    p$x$data[[idx]]$colorbar$x &lt;- 0.5\n    p$x$data[[idx]]$colorbar$xanchor &lt;- \"center\"\n    p$x$data[[idx]]$colorbar$y &lt;- -0.22\n  }\n  p\n}"
  },
  {
    "objectID": "projects/crime-and-poverty-CODE.html#original-graphic-redesign",
    "href": "projects/crime-and-poverty-CODE.html#original-graphic-redesign",
    "title": "Crime And Poverty Redesign Project CODE",
    "section": "Original Graphic Redesign",
    "text": "Original Graphic Redesign\nThis code loads U.S. state-level data on crime and poverty, then creates two interactive scatterplots using ggplot2 and plotly that visualize the relationship between property crime and violent crime, with poverty rate shown as color. The first plot includes all states, while the second excludes Washington D.C. to adjust the axis scales for better comparison. (Utilized assistance from ChatGPT2 when creating all graphs that contain a legend tracking poverty percentage.)\n\n#load state data to be used for all state-level visualizations\n#####PLOT 1#####\n\n#create plot with all 3 variables (recreate original graph)\n#DO NOT DISPLAY THIS PLOT ON WEBSITE#\ndataviz1a = ggplot(state, aes(x=crime_rate_per_100k_property,y=crime_rate_per_100k_violent,\n                              text = paste0(\"State: \", state_abbr,\n                                            \"&lt;br&gt;Poverty: \", poverty_rate_pct, \"%\",\n                                            \"&lt;br&gt;Property Crime: \", crime_rate_per_100k_property,\n                                            \"&lt;br&gt;Violent Crime: \", crime_rate_per_100k_violent)))+\n  geom_point(aes(fill=poverty_rate_pct), color = \"black\", shape = 21, size = 3.5, stroke = 0.2)+\n  theme_minimal()+\n  scale_fill_gradientn(\n    name = \"Poverty Percentage\",\n    colours = c(\"white\", \"goldenrod1\", \"darkred\"),\n    values = scales::rescale(c(0, median(state$poverty_rate_pct, na.rm = TRUE), max(state$poverty_rate_pct, na.rm = TRUE))),\n    na.value = \"grey50\", \n    labels = function(x) paste0(x, \"%\"))+ #used AI to help create code to add percent symbols in legend\n  labs(title = \"2023 Property Crime vs Violent Crime by State in Relation to Poverty\",\n       x = \"Property Crime Incidents per 100k Residents\",\n       y = \"Violent Crime Incidents per 100k Residents\")\ndataviz1a\n#convert previous plot to an interactive plotly plot\n###DISPLAY THIS PLOT ON WEBSITE###\nggplotly(dataviz1a, tooltip = \"text\")\n\n\n\n\n#####PLOT 2#####\n\n#create previous plot excluding the outlier data point (DC)\n#DO NOT DISPLAY THIS PLOT ON WEBSITE#\ndataviz1b = ggplot(state, aes(x=crime_rate_per_100k_property,y=crime_rate_per_100k_violent,\n                       text = paste0(\"State: \", state_abbr,\n                                     \"&lt;br&gt;Poverty: \", poverty_rate_pct, \"%\",\n                                     \"&lt;br&gt;Property Crime: \", crime_rate_per_100k_property,\n                                     \"&lt;br&gt;Violent Crime: \", crime_rate_per_100k_violent))) +\n  geom_point(aes(fill=poverty_rate_pct), color = \"black\", shape = 21, size = 3.5, stroke = 0.2)+\n  theme_minimal()+\n  scale_fill_gradientn(\n    name = \"Poverty Percentage\",\n    colours = c(\"white\", \"goldenrod1\", \"darkred\"),\n    values = scales::rescale(c(0, median(state$poverty_rate_pct, na.rm = TRUE), max(state$poverty_rate_pct, na.rm = TRUE))),\n    na.value = \"grey50\",\n    labels = function(x) paste0(x, \"%\"))+ #used AI to help create code to add percent symbols in legend\n  xlim(800,3000)+ \n  ylim(100,800)+\n  labs(title = \"2023 Property Crime vs Violent Crime by State in Relation to Poverty\n(D.C. Excluded)\",\n       x = \"Property Crime Incidents per 100k Residents\",\n       y = \"Violent Crime Incidents per 100k Residents\")\ndataviz1b\n#convert previous plot to an interactive plotly plot\n###DISPLAY THIS PLOT ON WEBSITE###\nggplotly(dataviz1b, tooltip = \"text\")"
  },
  {
    "objectID": "projects/crime-and-poverty-CODE.html#alternative-data-visualization---using-bar-charts",
    "href": "projects/crime-and-poverty-CODE.html#alternative-data-visualization---using-bar-charts",
    "title": "Crime And Poverty Redesign Project CODE",
    "section": "Alternative Data Visualization - Using Bar Charts",
    "text": "Alternative Data Visualization - Using Bar Charts\nThis code creates horizontal bar charts showing property and violent crime rates by U.S. state, colored by poverty percentage, first as separate plots sorted by crime rate and then displayed as a single faceted plot using long-format data to compare both crime types side-by-side.\n\n#arrange state data by property crime rate\nstate2a &lt;- state %&gt;%\n  mutate(state_abbr = factor(state_abbr, levels = state_abbr[order(crime_rate_per_100k_property)]))\n\n#plot property crime data\n#DO NOT DISPLAY THIS PLOT ON WEBSITE#\nggplot(state2a, aes(x=crime_rate_per_100k_property,y=state_abbr)) +\n  geom_bar(stat=\"identity\", aes(fill=poverty_rate_pct),color='black') +\n  labs(x=\"Property Crime Incidents per 100k Residents\",\n       y=\"States\",\n       title=\"2023 Property Crime by State in Relation to Poverty\")+\n  theme_minimal()+\n  scale_fill_gradientn(\n    name = \"Poverty Percentage\",\n    colours = c(\"white\", \"goldenrod1\", \"darkred\"),\n    values = scales::rescale(c(0, median(state$poverty_rate_pct, na.rm = TRUE), max(state$poverty_rate_pct, na.rm = TRUE))),\n    na.value = \"grey50\",\n    labels = function(x) paste0(x, \"%\")) #used AI to help create code to add percent symbols in legend\n#arrange state data by violent crime rate\nstate2b &lt;- state %&gt;%\n  mutate(state_abbr = factor(state_abbr, levels = state_abbr[order(crime_rate_per_100k_violent)]))\n\n#plot violent crime data\n#DO NOT DISPLAY THIS PLOT ON WEBSITE#\nggplot(state2b, aes(x=crime_rate_per_100k_violent,y=state_abbr)) +\n  geom_bar(stat=\"identity\", aes(fill=poverty_rate_pct),color='black') +\n  labs(x=\"Violent Crime Incidents per 100k Residents\",\n       y=\"States\",\n       title=\"2023 Violent Crime by State in Relation to Poverty\")+\n  theme_minimal()+\n  scale_fill_gradientn(\n    name = \"Poverty Percentage\",\n    colours = c(\"white\", \"goldenrod1\", \"darkred\"),\n    values = scales::rescale(c(0, median(state$poverty_rate_pct, na.rm = TRUE), max(state$poverty_rate_pct, na.rm = TRUE))),\n    na.value = \"grey50\",\n    labels = function(x) paste0(x, \"%\")) #used AI to help create code to add percent symbols in legend\n#convert state data to long format, so we can combine previous 2 plots into 1\nstate_long2 &lt;- state2a %&gt;%\n  pivot_longer(cols = c(crime_rate_per_100k_property, crime_rate_per_100k_violent),\n               names_to = \"crime_type\",\n               values_to = \"crime_rate\") %&gt;%\n  mutate(crime_type = recode(crime_type,\n                             crime_rate_per_100k_property = \"Property Crime\",\n                             crime_rate_per_100k_violent = \"Violent Crime\"))\n\n\n#plot property crime and violent crime side by side\n###DISPLAY THIS PLOT ON WEBSITE###\nggplot(state_long2, aes(x = crime_rate, y = state_abbr)) +\n  geom_bar(stat = \"identity\", aes(fill = poverty_rate_pct), color = \"black\") +\n  labs(x = \"Crime Incidents per 100k Residents\",\n       y = \"States\",\n       title = \"2023 Crime by State in Relation to Poverty\",\n       fill = \"Poverty Percentage\") +\n  theme_minimal() +\n  scale_fill_gradientn(\n    name = \"Poverty Percentage\",\n    colours = c(\"white\", \"goldenrod1\", \"darkred\"),\n    values = scales::rescale(c(0, median(state$poverty_rate_pct, na.rm = TRUE), max(state$poverty_rate_pct, na.rm = TRUE))),\n    na.value = \"grey50\",\n    labels = function(x) paste0(x, \"%\"))+ #used AI to help create code to add percent symbols in legend\n  theme(\n    plot.title = element_text(face = \"bold\"))+\n  facet_wrap(~ crime_type, ncol = 2, scales = \"free_x\")"
  },
  {
    "objectID": "projects/crime-and-poverty-CODE.html#alternative-data-visualization---using-poverty-as-dependent-variable",
    "href": "projects/crime-and-poverty-CODE.html#alternative-data-visualization---using-poverty-as-dependent-variable",
    "title": "Crime And Poverty Redesign Project CODE",
    "section": "Alternative Data Visualization - Using Poverty as Dependent Variable",
    "text": "Alternative Data Visualization - Using Poverty as Dependent Variable\nThis code creates a static scatterplot using faceting, then creates and displays a converted interactive scatterplot that visualizes the relationship between poverty rate and crime (property and violent) across U.S. states using plotly subplots. (Utilized assistance from ChatGPT3 when creating “2023 Crime vs Poverty by State, Separated by Crime Type” plot using plotly.)\n\n#create/load hw theme commonly used in class\nhw &lt;- theme_gray()+ theme(\n  plot.title=element_text(hjust=0.5),\n  plot.subtitle=element_text(hjust=0.5),\n  plot.caption=element_text(hjust=-.5),\n  \n  strip.text.y = element_blank(),\n  strip.background=element_rect(fill=rgb(.9,.95,1),\n                                colour=gray(.5), linewidth =.2),\n  \n  panel.border=element_rect(fill=FALSE,colour=gray(.70)),\n  panel.grid.minor.y = element_blank(),\n  panel.grid.minor.x = element_blank(),\n  panel.spacing.x = unit(0.10,\"cm\"),\n  panel.spacing.y = unit(0.05,\"cm\"),\n  \n  # axis.ticks.y= element_blank()\n  axis.ticks=element_blank(),\n  axis.text=element_text(colour=\"black\"),\n  axis.text.y=element_text(margin=margin(0,3,0,3)),\n  axis.text.x=element_text(margin=margin(-1,0,3,0))\n)\n\n#create plot with only property crime and poverty data variables\n#DO NOT DISPLAY THIS PLOT ON WEBSITE#\nggplot(state, aes(x=crime_rate_per_100k_property,y=poverty_rate_pct))+\n  geom_point(fill=\"green\", color = \"black\", shape = 21, size = 3, stroke = 0.5)+\n  hw+\n  labs(title = \"2023 Property Crime vs Poverty by State\",\n       x = \"Property Crime Incidents per 100k Residents\",\n       y = \"Poverty Percentage\")\n#create plot with only violent crime and poverty data variables\n#DO NOT DISPLAY THIS PLOT ON WEBSITE#\nggplot(state, aes(x=crime_rate_per_100k_violent,y=poverty_rate_pct))+\n  geom_point(fill=\"blue\", color = \"black\", shape = 21, size = 3, stroke = 0.5)+\n  hw+\n  labs(title = \"2023 Violent Crime vs Poverty by State\",\n       x = \"Violent Crime Incidents per 100k Residents\",\n       y = \"Poverty Percentage\")\n#convert state data to long format, so we can combine previous 2 plots into 1\nstate_long3 &lt;- state %&gt;%\n  select(state_abbr, poverty_rate_pct,\n         crime_rate_per_100k_property,\n         crime_rate_per_100k_violent) %&gt;%\n  pivot_longer(\n    cols = c(crime_rate_per_100k_property, crime_rate_per_100k_violent),\n    names_to = \"crime_type\",\n    values_to = \"crime_rate\"\n  ) %&gt;%\n  mutate(\n    crime_type = recode(crime_type,\n                        crime_rate_per_100k_property = \"Property Crime\",\n                        crime_rate_per_100k_violent = \"Violent Crime\")\n  )\n\n#plot property crime vs poverty and violent crime vs poverty side by side on same visualization\n#DO NOT DISPLAY THIS PLOT ON WEBSITE#\nggplot(state_long3, aes(x = crime_rate, y = poverty_rate_pct)) +\n  geom_point(aes(fill = crime_type), color = \"black\", shape = 21, size = 3, stroke = 0.5) +\n  scale_fill_manual(values = c(\"Property Crime\" = \"green\", \"Violent Crime\" = \"blue\")) +\n  facet_wrap(~ crime_type, ncol = 2, scales = \"free_x\") +\n  labs(\n    title = \"2023 Crime vs Poverty by State, Separated by Crime Type\",\n    x = \"Crime Incidents per 100k Residents\",\n    y = \"Poverty Percentage\",\n    fill = \"Crime Type\"\n  ) +\n  hw \n##recreate previous plot using plotly below (used AI to help create desired conversion)\n\n#create the Property Crime plot using plotly\n#DO NOT DISPLAY THIS PLOT ON WEBSITE#\nplotly3a &lt;- plot_ly(\n  data = state,\n  x = ~crime_rate_per_100k_property,\n  y = ~poverty_rate_pct,\n  type = \"scatter\",\n  mode = \"markers\",\n  marker = list(color = \"green\", line = list(color = \"black\", width = 0.5), size = 10),\n  text = ~paste0(\"State: \", state_abbr,\n                 \"&lt;br&gt;Property Crime: \", crime_rate_per_100k_property,\n                 \"&lt;br&gt;Poverty: \", poverty_rate_pct, \"%\"),\n  hoverinfo = \"text\",\n  name = \"Property Crime\"\n) %&gt;%\n  layout(\n    title = \"Property Crime vs Poverty\",\n    xaxis = list(title = \"Property Crime Incidents \n    per 100k Residents\"),\n    yaxis = list(title = \"Poverty Percentage\")\n  )\n\n#create the Violent Crime plot using plotly\n#DO NOT DISPLAY THIS PLOT ON WEBSITE#\nplotly3b &lt;- plot_ly(\n  data = state,\n  x = ~crime_rate_per_100k_violent,\n  y = ~poverty_rate_pct,\n  type = \"scatter\",\n  mode = \"markers\",\n  marker = list(color = \"blue\", line = list(color = \"black\", width = 0.5), size = 10),\n  text = ~paste0(\"State: \", state_abbr,\n                 \"&lt;br&gt;Violent Crime: \", crime_rate_per_100k_violent,\n                 \"&lt;br&gt;Poverty: \", poverty_rate_pct, \"%\"),\n  hoverinfo = \"text\",\n  name = \"Violent Crime\"\n) %&gt;%\n  layout(\n    title = \"Violent Crime vs Poverty\",\n    xaxis = list(title = \"Violent Crime Incidents \n    per 100k Residents\"),\n    yaxis = list(title = \"Poverty Percentage\")\n  )\n\n#combine the two previous plots into a subplot\n###DISPLAY THIS PLOT ON WEBSITE###\nsubplot(plotly3a, plotly3b, nrows = 1, shareY = TRUE, titleX = TRUE, titleY = TRUE) %&gt;%\n  layout(\n    title = \"2023 Crime vs Poverty by State, Separated by Crime Type\",\n    showlegend = FALSE\n  )"
  },
  {
    "objectID": "projects/crime-and-poverty-CODE.html#comparing-crime-and-poverty-by-state-on-usa-map",
    "href": "projects/crime-and-poverty-CODE.html#comparing-crime-and-poverty-by-state-on-usa-map",
    "title": "Crime And Poverty Redesign Project CODE",
    "section": "Comparing Crime and Poverty by State on USA Map",
    "text": "Comparing Crime and Poverty by State on USA Map\nThis code prepares and joins U.S. state-level geographic and crime/poverty data, then creates three choropleth maps (for poverty, property crime, and violent crime) using ggplot2, and finally combines them into a single vertically-faceted visualization.\n\n#get USA map data and save as tibble\nusa_tbl &lt;- map_data(\"state\") %&gt;% as_tibble()\n#take state data and convert all state names to lower case\nstate4 &lt;- state %&gt;%\n  mutate(state_name = str_to_lower(state_name))\n#join USE map data and state data\nusa_state_data &lt;- usa_tbl %&gt;%\n  left_join(state4, by = c(\"region\"= \"state_name\"))\n\n#create USA map containing poverty data\n#DO NOT DISPLAY THIS PLOT ON WEBSITE#\ndataviz4a = ggplot(usa_state_data, aes(long, lat, group = group)) +\n  geom_map(\n    aes(map_id = region),\n    map = usa_tbl,\n    color = \"gray80\", fill = \"gray30\", size = 0.3) +\n  coord_map(\"ortho\", orientation = c(39, -98, 0)) +\n  geom_polygon(aes( fill = poverty_rate_pct), color = \"black\") +\n  scale_fill_gradientn(\n    name = \"Poverty Percentage\",\n    colours = c(\"darkseagreen2\", \"steelblue\", \"midnightblue\"),\n    values = scales::rescale(c(0, median(state$poverty_rate_pct, na.rm = TRUE), max(state$poverty_rate_pct, na.rm = TRUE))),\n    na.value = \"grey50\", \n    labels = function(x) paste0(x, \"%\")) +\n  theme_void() +\n  labs(title = \"2023 Poverty Percentage by State\",x = \"\", y = \"\", fill = \"\") +\n  theme(\n    plot.title = element_text(size = 22, face = \"bold\", color = \"darkred\", hjust=0.5),\n    legend.title = element_text(size=12, face = \"bold\"),\n    legend.margin = margin(t = 10),\n    legend.key.size = unit(1, \"cm\"),\n    legend.position = \"top\")\ndataviz4a\n#create USA map containing property crime data\n#DO NOT DISPLAY THIS PLOT ON WEBSITE#\ndataviz4b = ggplot(usa_state_data, aes(long, lat, group = group)) +\n  geom_map(\n    aes(map_id = region),\n    map = usa_tbl,\n    color = \"gray80\", fill = \"gray30\", size = 0.3) +\n  coord_map(\"ortho\", orientation = c(39, -98, 0)) +\n  geom_polygon(aes( fill = crime_rate_per_100k_property), color = \"black\") +\n  scale_fill_gradientn(\n    name = \"Property Crime Incidents per 100k Residents\",\n    colours = c(\"darkseagreen2\", \"steelblue\", \"midnightblue\"),\n    values = scales::rescale(c(0, max(state$crime_rate_per_100k_property, na.rm = TRUE))),\n    na.value = \"grey50\") +\n  theme_void() +\n  labs(title = \"2023 Property Crime Incidents per 100,000 Residents by State\",x = \"\", y = \"\", fill = \"\") +\n  theme(\n    plot.title = element_text(size = 22, face = \"bold\", color = \"darkgreen\", hjust=0.5),\n    legend.title = element_text(size=12, face = \"bold\"),\n    legend.margin = margin(t = 10),\n    legend.key.size = unit(1, \"cm\"),\n    legend.position = \"top\")\ndataviz4b\n#create USA map containing violent crime data\n#DO NOT DISPLAY THIS PLOT ON WEBSITE#\ndataviz4c = ggplot(usa_state_data, aes(long, lat, group = group)) +\n  geom_map(\n    aes(map_id = region),\n    map = usa_tbl,\n    color = \"gray80\", fill = \"gray30\", size = 0.3) +\n  coord_map(\"ortho\", orientation = c(39, -98, 0)) +\n  geom_polygon(aes( fill = crime_rate_per_100k_violent), color = \"black\") +\n  scale_fill_gradientn(\n    name = \"Violent Crime Incidents per 100k Residents\",\n    colours = c(\"darkseagreen2\", \"steelblue\", \"midnightblue\"),\n    values = scales::rescale(c(0, max(state$crime_rate_per_100k_violent, na.rm = TRUE))),\n    na.value = \"grey50\") +\n  theme_void() +\n  labs(title = \"2023 Violent Crime Incidents per 100,000 Residents by State\",x = \"\", y = \"\", fill = \"\") +\n  theme(\n    plot.title = element_text(size = 22, face = \"bold\", color = \"darkblue\", hjust=0.5),\n    legend.title = element_text(size=12, face = \"bold\"),\n    legend.margin = margin(t = 10),\n    legend.key.size = unit(1, \"cm\"),\n    legend.position = \"top\")\ndataviz4c\n\n\n#combine the previous 3 plots\n###DISPLAY THIS PLOT ON WEBSITE###\ndataviz4 &lt;- dataviz4a / dataviz4b / dataviz4c\ndataviz4"
  },
  {
    "objectID": "projects/crime-and-poverty-CODE.html#comparing-crime-and-poverty-by-u.s.-county",
    "href": "projects/crime-and-poverty-CODE.html#comparing-crime-and-poverty-by-u.s.-county",
    "title": "Crime And Poverty Redesign Project CODE",
    "section": "Comparing Crime and Poverty by U.S. County",
    "text": "Comparing Crime and Poverty by U.S. County\nThis code joins the county metrics to U.S. county polygons via FIPS (using the hlper function above), builds three choropleths (poverty rate, property crime per 100k, violent crime per 100k) with percentile-based binning (also leveraging the helper function), and stacks them vertically with a unified title and captions.\n\ndf &lt;- county\n\ndf &lt;- derive_fips(df)\n\n# Join metrics to polygons\nmap_df &lt;- counties_poly %&gt;%\n  left_join(\n    df %&gt;% select(fips, all_of(county_metric_cols)),\n    by = \"fips\"\n  )\n\n# Limits for each metric - 95th percentile as the upper scale limit\nlim_pov  &lt;- c(0, max(0.3, min(0.6, ceiling(p95(map_df$poverty_rate) * 10) / 10))) \nlim_prop &lt;- c(0, p95(map_df$property_crime_per_100k)) \nlim_viol &lt;- c(0, p95(map_df$violent_crime_per_100k)) \n\npoverty &lt;- build_county_map(map_df) +\n  geom_polygon(aes(fill = poverty_rate)) +\n  scale_fill_binned_left(\n    x = map_df$poverty_rate,\n    step = 0.05, \n    min_cap = 0.30, max_cap = 0.60,\n    label_fmt = scales::label_percent(accuracy = 1),\n    name = \"Poverty rate (% of residents)\"\n  ) +\n  labs(title = \"Poverty Rate by County\") +\n  theme(\n    legend.position = \"top\",\n    plot.title = element_text(size = 22, face = \"bold\"),\n    plot.title.position = \"plot\",\n    legend.justification = \"left\",\n    legend.box.just = \"left\"\n  )\n\nproperty &lt;- build_county_map(map_df) +\n  geom_polygon(aes(fill = property_crime_per_100k)) +\n  scale_fill_binned_left(\n    x = map_df$property_crime_per_100k,\n    step = 500,  # Bucket width\n    label_fmt = scales::label_number(accuracy = 1, big.mark = \",\"),\n    name = \"Property crime incidents (per 100k) residents\" \n  ) +\n  labs(title = \"Property crime incidents per 100,000 residents\") +\n  theme(\n    legend.position = \"top\",\n    plot.title = element_text(size = 22, face = \"bold\"),\n    plot.title.position = \"plot\",\n    legend.justification = \"left\",\n    legend.box.just = \"left\"\n  )\n\nviolent &lt;- build_county_map(map_df) +\n  geom_polygon(aes(fill = violent_crime_per_100k)) +\n  scale_fill_binned_left(\n    x = map_df$violent_crime_per_100k,\n    step = 100,\n    label_fmt = scales::label_number(accuracy = 1, big.mark = \",\"),\n    name = \"Violent crime incidents per 100k residents\"\n  ) +\n  labs(title = \"Violent crime incidents per 100,000 residents\") +\n  theme(\n    legend.position = \"top\",\n    plot.title = element_text(size = 22, face = \"bold\"),\n    plot.title.position = \"plot\",\n    legend.justification = \"left\",\n    legend.box.just = \"left\"\n  )\n\n# Stack each plot vertically\nstack_us &lt;-\n  (poverty / property / violent) &\n  theme(\n    plot.margin = margin(6, 10, 6, 10)\n  )\n\nstack_us +\n  plot_annotation(\n    title   = \"Crime & Poverty by U.S. County\",\n    caption = \"Note: Some county data are missing from the Census data\\nSource: FBI Crime Data API and data.census.gov for 2023\",\n    theme = theme(\n      plot.title.position = \"plot\",\n      plot.title   = element_text(size = 28, face = \"bold\", hjust = 0), \n      plot.caption.position = \"plot\", \n      plot.caption = element_text(size = 16, hjust = 0, colour = \"grey30\",\n                                  lineheight = 1.15, margin = margin(t = 10)),\n      plot.margin  = margin(8, 12, 18, 12)\n    )\n  )"
  },
  {
    "objectID": "projects/crime-and-poverty-CODE.html#zooming-in-on-south-carolina",
    "href": "projects/crime-and-poverty-CODE.html#zooming-in-on-south-carolina",
    "title": "Crime And Poverty Redesign Project CODE",
    "section": "Zooming in on South Carolina",
    "text": "Zooming in on South Carolina\nThis code filters the U.S. county map down to South Carolina, joins in your county metrics, builds three choropleths (poverty rate, property crime per 100k, violent crime per 100k) with binned legends, and stacks them vertically under a shared title/caption. Similar to what was done above expect filtering on SC.\n\ndf &lt;- county\n\ndf &lt;- derive_fips(df)\n\n# Build South Carolina map data only\nsc_poly &lt;- counties_poly %&gt;% filter(region == \"south carolina\")\n\nsc_map &lt;- sc_poly %&gt;%\n  left_join(df %&gt;% select(fips, all_of(county_metric_cols)), by = \"fips\")\n\nlim_pov  &lt;- c(0, max(0.3, min(0.6, ceiling(p95(sc_map$poverty_rate) * 10) / 10)))\nlim_prop &lt;- c(0, {x &lt;- p95(sc_map$property_crime_per_100k); if (!is.finite(x)) max(sc_map$property_crime_per_100k, na.rm = TRUE) else x})\nlim_viol &lt;- c(0, {x &lt;- p95(sc_map$violent_crime_per_100k);  if (!is.finite(x)) max(sc_map$violent_crime_per_100k,  na.rm = TRUE) else x})\n\npoverty_sc &lt;- build_county_map(sc_map) +\n  geom_polygon(aes(fill = poverty_rate)) +\n  scale_fill_binned_left(\n    x = sc_map$poverty_rate,\n    step = 0.05,\n    min_cap = 0.30, max_cap = 0.60,\n    label_fmt = scales::label_percent(accuracy = 1),\n    name = \"Poverty rate (% of residents)\"\n  ) +\n  labs(title = \"Poverty Rate by County\") +\n  theme(\n    legend.position = \"top\",\n    plot.title.position = \"plot\",\n    legend.justification = \"left\",\n    legend.box.just = \"left\",\n    plot.title = element_text(size = 22, face = \"bold\")\n  )\n\nproperty_sc &lt;- build_county_map(sc_map) +\n  geom_polygon(aes(fill = property_crime_per_100k)) +\n  scale_fill_binned_left(\n    x = sc_map$property_crime_per_100k,\n    step = 500,\n    label_fmt = scales::label_number(accuracy = 1, big.mark = \",\"),\n    name = \"Property crime incidents per 100k residents\"\n  ) +\n  labs(title = \"Property crime incidents per 100,000 residents\") +\n  theme(\n    legend.position = \"top\",\n    plot.title.position = \"plot\",\n    legend.justification = \"left\",\n    legend.box.just = \"left\",\n    plot.title = element_text(size = 22, face = \"bold\")\n  )\n\nviolent_sc &lt;- build_county_map(sc_map) +\n  geom_polygon(aes(fill = violent_crime_per_100k)) +\n  scale_fill_binned_left(\n    x = sc_map$violent_crime_per_100k,\n    step = 200,\n    label_fmt = scales::label_number(accuracy = 1, big.mark = \",\"),\n    name = \"Violent crime incidents per 100k residents\"\n  ) +\n  labs(title = \"Violent crime incidents per 100,000 residents\") +\n  theme(\n    legend.position = \"top\",\n    plot.title.position = \"plot\",\n    legend.justification = \"left\",\n    legend.box.just = \"left\",\n    plot.title = element_text(size = 22, face = \"bold\")\n  )\n\n# Stack the three maps\nstack_sc &lt;-\n  (poverty_sc / property_sc / violent_sc) &\n  theme(plot.margin = margin(6, 10, 6, 10))\n\nstack_sc +\n  plot_annotation(\n    title   = \"South Carolina by County\",\n    caption = \"Note: Some county data are missing from the Census data\\nSource: FBI Crime Data API and data.census.gov for 2023\",\n    theme = theme(\n      plot.title.position = \"plot\",\n      plot.title   = element_text(size = 28, face = \"bold\", hjust = 0),\n      plot.caption.position = \"plot\",\n      plot.caption = element_text(size = 16, hjust = 0, colour = \"grey30\",\n                                  lineheight = 1.15, margin = margin(t = 10)),\n      plot.margin  = margin(8, 12, 18, 12)\n    )\n  )"
  },
  {
    "objectID": "projects/crime-and-poverty-CODE.html#interactive-plot-of-south-carolina-to-look-at-individual-counties",
    "href": "projects/crime-and-poverty-CODE.html#interactive-plot-of-south-carolina-to-look-at-individual-counties",
    "title": "Crime And Poverty Redesign Project CODE",
    "section": "Interactive Plot of South Carolina to Look at Individual Counties",
    "text": "Interactive Plot of South Carolina to Look at Individual Counties\n\ndf &lt;- county\n\ndf &lt;- derive_fips(df)\n\nsc &lt;- counties_poly %&gt;%\n  dplyr::filter(region == \"south carolina\") %&gt;%\n  dplyr::left_join(df %&gt;% dplyr::select(fips, poverty_rate, property_crime_per_100k, violent_crime_per_100k),\n                   by = \"fips\") %&gt;%\n  dplyr::mutate(\n    hover_text = paste0(\n      \"County: \", stringr::str_to_title(subregion), \"&lt;br&gt;\",\n      \"Poverty rate: \", scales::percent(poverty_rate, accuracy = 0.1), \"&lt;br&gt;\",\n      \"Property /100k: \", scales::comma(property_crime_per_100k, accuracy = 1), \"&lt;br&gt;\",\n      \"Violent /100k: \",  scales::comma(violent_crime_per_100k,  accuracy = 1)\n    )\n  )\n\nstep  &lt;- 0.05\nupper &lt;- min(0.60, max(0.30, ceiling(p95(sc$poverty_rate) / step) * step))\nbrks  &lt;- seq(0, upper, by = step)\nlabs  &lt;- paste0(scales::percent(head(brks, -1), accuracy = 1), \"–\",\n                scales::percent(tail(brks, -1), accuracy = 1))\n\np_sc &lt;- ggplot(sc, aes(long, lat, group = group)) +\n  geom_polygon(aes(fill = poverty_rate, text = hover_text), color = \"gray85\", linewidth = 0.1, na.rm = TRUE) +\n  coord_quickmap() +\n  scale_fill_viridis_b(\n    option = \"mako\", begin = 0.15, end = 0.90, direction = -1, # colormap or palette\n    limits = range(brks),\n    breaks = brks,\n    labels = c(labs, \"\"),\n    oob = scales::squish, na.value = \"gray95\",\n    name = NULL, guide = \"none\"\n  ) +\n  labs(title = \"South Carolina — Poverty Rate\") +\n  theme_void(base_size = 12)\n\n# --- plotly conversion + enforced title + custom colorbar ---\np &lt;- plotly::ggplotly(p_sc, tooltip = \"text\")\np &lt;- plotly::layout(p, title = list(text = \"South Carolina — Poverty Rate\", x = 0, xanchor = \"left\"))\n\np &lt;- apply_plotly_binned_colorbar(\n  p,\n  brks = brks,\n  labs = labs,\n  title = \"Poverty rate (% of residents)\",\n  horizontal = TRUE,\n  thickness = 28, len = 1, show_separators = TRUE,\n  title_font_size = 13, tick_font_size = 12\n)\n\np"
  },
  {
    "objectID": "projects/crime-and-poverty-CODE.html#footnotes",
    "href": "projects/crime-and-poverty-CODE.html#footnotes",
    "title": "Crime And Poverty Redesign Project CODE",
    "section": "Footnotes",
    "text": "Footnotes\n\n\n(https://r-graph-gallery.com/choropleth-map.html)↩︎\nOpenAI. (2025, September 27). Response to a question about adding percent symbols to a ggplot2 legend in R [Large language model]. ChatGPT. https://chat.openai.com/↩︎\nOpenAI. (2025, October 1). Response to a question about converting faceted ggplot to plotly in R [Large language model]. ChatGPT. https://chat.openai.com/↩︎"
  },
  {
    "objectID": "projects/crime-and-poverty.html",
    "href": "projects/crime-and-poverty.html",
    "title": "Possible Relationship Between Poverty & Crime in Dillon County South Carolina",
    "section": "",
    "text": "Summary: Data Visualization Redesign Project."
  },
  {
    "objectID": "projects/crime-and-poverty.html#introduction",
    "href": "projects/crime-and-poverty.html#introduction",
    "title": "Possible Relationship Between Poverty & Crime in Dillon County South Carolina",
    "section": "Introduction",
    "text": "Introduction\nThe task of this project is to find an existing data visualization, critically analyze its context and shortcomings, create multiple improved redesigns to reveal new patterns, compare the effectiveness of the original and redesigned plots, and provide thoughtful commentary on the process, challenges, and potential next steps while providing a story we can tell from the data."
  },
  {
    "objectID": "projects/crime-and-poverty.html#original-graphic",
    "href": "projects/crime-and-poverty.html#original-graphic",
    "title": "Possible Relationship Between Poverty & Crime in Dillon County South Carolina",
    "section": "Original Graphic",
    "text": "Original Graphic\n\n\n\n\n\n\nFigure 1: The original chart1.\n\n\n\nThe visualization shown above (see Figure 1) is the original graph that we chose for this redesign project. This visualization was taken from a website that identified multiple examples of data visualizations that do not follow best practices. Just at first glance, we can very quickly determine that there is a lot going on in this graph. In fact, there is too much going on to the point that it is hard for the audience to understand the intended story behind the graph.\n\nThe Good\n\nThe chart attempts to track three variables (property crime, violent crime, and poverty rate) in the same visualization which can be insightful to examine their intertwined relationships.\nUsing bubble charts is actually not a bad idea here and when used well it can actually be insightful allowing for proportions to be distinguished.\n\n\n\nThe Bad\nOn the other hand the chart did not do a great job in portraying the data in such a way that the audience can easily interpret and did poorly is several areas:\n\nThe bubble radius for the poverty variable has no numeric reference, so even though they are comparable between states, any single radius has no meaning on its own.\nAdditionally, there is no title of the graph so it is unclear what timeframe this data is coming from.\nThe state labels are messy and hard to read\nThe units could be more explicit.\nThe color choice is not the best.\n\nOverall, there are several changes that can be made to this original graph to better illustrate the data and the message."
  },
  {
    "objectID": "projects/crime-and-poverty.html#our-proposed-redesign",
    "href": "projects/crime-and-poverty.html#our-proposed-redesign",
    "title": "Possible Relationship Between Poverty & Crime in Dillon County South Carolina",
    "section": "Our Proposed Redesign",
    "text": "Our Proposed Redesign\nIn our redesigns, the primary goal is to make the visualizations easier to understand than the original graph. This entails reducing the level of effort needed to interpret the visualizations. There are some elements of the original graph that had good intentions behind them though, that are worth incorporating in our redesigns but we will also include several improvements and extensions to the original in several ways:\n\nThe concept of tracking three variables in the same visualization can be insightful to examine their intertwined relationships. However, we can implement this concept more effectively by simplifying variable visuals and reducing overall visual clutter within the graph.\nAdditionally, we can create multiple graphs side by side for comparison between these variables, with each graph focusing on only one or two variables.\nFor another example, the concept of comparing variables between states is important in telling a story about the data. However, we can implement this concept more effectively by cleaning up the state labels and even utilizing a different element, such as a color gradient, to differentiate between the multiple poverty levels.\nAdditionally, we can even move away from classic dot plots and explore plotting this data on a map, as most readers are familiar with a map of the US.\n\nThese are just some of the various solutions that we implemented in our redesigns."
  },
  {
    "objectID": "projects/crime-and-poverty.html#data-sources",
    "href": "projects/crime-and-poverty.html#data-sources",
    "title": "Possible Relationship Between Poverty & Crime in Dillon County South Carolina",
    "section": "Data Sources",
    "text": "Data Sources\nThe original chart did not cite its data source. Given the topic (crime and poverty rates), we assumed the data should come from authoritative databases. For this redesign, we performed substantial data preparation (described next) using the sources listed below:\n\nFBI Crime Data API2.\n\n\nThe United States Census Bureau3.\n\n\nA Note On Data Wrangling\nWe pulled 2023 data from two APIs—the U.S. Census Bureau (population and poverty) and the FBI Crime Data API—and used the Polars Python library to clean and reshape it into an analysis-ready dataset. The Census API let us retrieve state- and county-level values in a single request for 2023, but some counties lacked population (and therefore poverty rates), and a few areas (e.g., Louisiana) were missing from the pull.\nFor crime, we queried two FBI endpoints roughly ~50,000 times using ORIs (Originating Agency Identifiers) that uniquely identify police agencies within counties. After fetching, we joined the Census and crime records on state and county, then performed the required aggregations and calculated per-100,000 incident rates.\n\n\nKey Metrics & Derivations\nThis project uses three key metrics namely:\n\nPoverty rate\n\\[\n\\text{PovertyRate (\\%)} \\;=\\; \\frac{N_{\\text{below poverty}}}{N_{\\text{poverty universe}}}\\times 100\n\\]\n(As a proportion: ( = ).)\nProperty crime incidents per 100,000 residents\n\\[\n\\text{PropertyCrimeRate}_{/100k} \\;=\\; \\frac{N_{\\text{property incidents}}}{N_{\\text{population}}}\\times 100{,}000\n\\]\nViolent crime incidents per 100,000 residents\n\\[\n\\text{ViolentCrimeRate}_{/100k} \\;=\\; \\frac{N_{\\text{violent incidents}}}{N_{\\text{population}}}\\times 100{,}000\n\\]\n\n\\[\n\\begin{aligned}\n\\textbf{Where:}\\quad & \\\\\nN_{\\text{population}} &:= \\text{total population}\\\\\nN_{\\text{below poverty}} &:= \\text{count below poverty}\\\\\nN_{\\text{property incidents}} &:= \\text{total reported property crime incidents in the period (e.g., 2023)}\\\\\nN_{\\text{violent incidents}} &:= \\text{total reported violent crime incidents in the period (e.g., 2023)}\n\\end{aligned}\n\\]"
  },
  {
    "objectID": "projects/crime-and-poverty.html#section",
    "href": "projects/crime-and-poverty.html#section",
    "title": "Possible Relationship Between Poverty & Crime in Dillon County South Carolina",
    "section": "——————————————",
    "text": "——————————————"
  },
  {
    "objectID": "projects/crime-and-poverty.html#original-graphic-redesign",
    "href": "projects/crime-and-poverty.html#original-graphic-redesign",
    "title": "Possible Relationship Between Poverty & Crime in Dillon County South Carolina",
    "section": "Original Graphic Redesign",
    "text": "Original Graphic Redesign\nThe goal of our first redesign is to recreate the original graphic keeping most elements the same, but with improved labeling, less visual clutter, and clear interpretation of the poverty variable. More specifically, we will add a title that explains the nature and origin of the data, use a color gradient to differentiate between poverty levels, and transition the state labels to an interactive element of the visualization.\n\n\n\n\n\n\nNote that we can quickly see that the District of Columbia (DC) has significantly more crime incidents (both property crime and violent crime) than any US state, which stretches the scales of the axes. Let’s recreate this graph, excluding the outlier data point of DC, so that we can identify potential trends between the 50 states more clearly.\n\n\n\n\n\n\nNow let’s analyze the redesign shown above. When viewing this visualization, we can identify a positive relationship between property crime and violent crime much easier than in the original graphic. In other words, the more property crime incidents a state experiences often correlates with more violent crime incidents. Additionally, it is worth taking note that there are multiple states with higher poverty percentages scattered throughout the plot (look at Mississippi, West Virgina, Kentucky, Louisiana, and New Mexico)."
  },
  {
    "objectID": "projects/crime-and-poverty.html#alternative-data-visualization---using-bar-charts",
    "href": "projects/crime-and-poverty.html#alternative-data-visualization---using-bar-charts",
    "title": "Possible Relationship Between Poverty & Crime in Dillon County South Carolina",
    "section": "Alternative Data Visualization - Using Bar Charts",
    "text": "Alternative Data Visualization - Using Bar Charts\nThere are several alternative ways to illustrate the same information from the original graphic. The redesign below portrays the same data but in a familiar way by using two bar charts side by side, with one for property crime data by state and one for violent crime data by state. One positive of this type of visualization is that the state abbreviation labels are clearly displayed without requiring any interactive elements. Another positive is that these bar charts allow for even easier comparisons between state data, as states’ bars are arranged by their property crime data.\n\n\n\n\n\n\n\n\n\nWhen comparing the two bar charts, the previously identified positive trend between property crime and violent crime is shown, although it is not exactly linear. Upon examining the visualization more closely, it is interesting that Mississippi exhibits relatively low property crime and violent crime given its high poverty percentage. Conversely, it is interesting that Colorado has such a low poverty percentage given that it exhibits higher property crime and violent crime. This could indicate the lack of a substantial relationship between poverty percentage and crime incidents (property crime and violent crime) at the state level."
  },
  {
    "objectID": "projects/crime-and-poverty.html#alternative-data-visualization---using-poverty-as-dependent-variable",
    "href": "projects/crime-and-poverty.html#alternative-data-visualization---using-poverty-as-dependent-variable",
    "title": "Possible Relationship Between Poverty & Crime in Dillon County South Carolina",
    "section": "Alternative Data Visualization - Using Poverty as Dependent Variable",
    "text": "Alternative Data Visualization - Using Poverty as Dependent Variable\nWhile our previous graphs highlight more of the relationship between property crime and violent crime, the goal of the visualization below is to succinctly investigate the relationship between poverty and crime, by tracking poverty percentage as the dependent variable instead of a color gradient. This is done by creating two separate scatterplots side by side, one for property crime versus poverty and one for violent crime versus property.\n\n\n\n\n\n\nWhen analyzing these scatterplots of state-level data, we cannot identify a clear correlation between property crime and poverty, while only a slightly positive correlation between violent crime and poverty is observed. This confirms our suspicion that there is no substantial relationship between poverty percentage and crime incidents (property crime and violent crime) at the state level based on our data. Given this information, let’s visualize the data in one more way before determining the next steps."
  },
  {
    "objectID": "projects/crime-and-poverty.html#comparing-crime-and-poverty-by-state-on-usa-map",
    "href": "projects/crime-and-poverty.html#comparing-crime-and-poverty-by-state-on-usa-map",
    "title": "Possible Relationship Between Poverty & Crime in Dillon County South Carolina",
    "section": "Comparing Crime and Poverty by State on USA Map",
    "text": "Comparing Crime and Poverty by State on USA Map\nAfter identifying some of the relationships between property crime, violent crime, and poverty using bubble charts, bar charts, and scatterplots, let’s plot this data on a geographical map4 that everyone is familiar with. The visualization below displays three US maps, each tracking a different variable by a common color gradient, making it easier to spot states of interest and see how the metrics move together.\n\n\n\n\n\n\n\n\n\nThere are a few regions in the US that exhibit a relatively darker hue on all three maps. These regions include the southern Midwest states, states in the mid-southern West Coast area, and a few states in the mid-southern East Coast area. However, analyzing broader state data may not be the most effective route to capture more comprehensive trends. To better understand the relationship between poverty and crime in the US, the next step is to examine data at the county level, allowing for more detailed and comprehensive analysis."
  },
  {
    "objectID": "projects/crime-and-poverty.html#comparing-crime-and-poverty-by-u.s.-county",
    "href": "projects/crime-and-poverty.html#comparing-crime-and-poverty-by-u.s.-county",
    "title": "Possible Relationship Between Poverty & Crime in Dillon County South Carolina",
    "section": "Comparing Crime and Poverty by U.S. County",
    "text": "Comparing Crime and Poverty by U.S. County\nState-level data is useful for identifying broad, statewide trends, but county-level views let us zoom into specific pockets within states to understand patterns at a finer, more granular level. By comparing the three maps side by side, the color saturation makes it easier to spot counties of interest and see how the metrics move together.\nOne state that suggests a clear pattern is South Carolina. Looking across all three charts, a region stands out with consistently darker hues—yet it’s still a bit hard to tell exactly which county is driving that signal."
  },
  {
    "objectID": "projects/crime-and-poverty.html#zooming-in-on-south-carolina",
    "href": "projects/crime-and-poverty.html#zooming-in-on-south-carolina",
    "title": "Possible Relationship Between Poverty & Crime in Dillon County South Carolina",
    "section": "Zooming in on South Carolina",
    "text": "Zooming in on South Carolina\nContinuing our analysis, we remove the broader noise and focus on South Carolina using the same chart type. In the upper-right corner, one county consistently exhibits the darkest hue across all three metrics—poverty rate, property crime, and violent crime. Which county is that?"
  },
  {
    "objectID": "projects/crime-and-poverty.html#interactive-plot-of-south-carolina-to-look-at-individual-counties",
    "href": "projects/crime-and-poverty.html#interactive-plot-of-south-carolina-to-look-at-individual-counties",
    "title": "Possible Relationship Between Poverty & Crime in Dillon County South Carolina",
    "section": "Interactive Plot of South Carolina to Look at Individual Counties",
    "text": "Interactive Plot of South Carolina to Look at Individual Counties\nTo explore all counties across the metrics, use the interactive Plotly chart to identify each county. Hover to see names and values, and use the zoom/pan controls in the top-right modebar; to find Dillon County, zoom into the upper-right corner of South Carolina and hover until the tooltip shows “Dillon County.”"
  },
  {
    "objectID": "projects/crime-and-poverty.html#from-insight-to-action-dillon-countys-povertycrime-overlap",
    "href": "projects/crime-and-poverty.html#from-insight-to-action-dillon-countys-povertycrime-overlap",
    "title": "Possible Relationship Between Poverty & Crime in Dillon County South Carolina",
    "section": "From Insight to Action: Dillon County’s Poverty–Crime Overlap",
    "text": "From Insight to Action: Dillon County’s Poverty–Crime Overlap\nThe chart below uses a callout (“bang box”) to highlight the county that appears most at risk. Our call to action notes a strong apparent relationship between poverty rates and crime in Dillon County. While this is not an advanced statistical analysis, cursory online research suggests that through 2023 both crime and poverty were very high according to several reports5, and at least one source indicates some action was taken in 20246.\nBefore this analysis, we weren’t even aware of Dillon County; data visualization helped us surface a real-world issue. We will forgo making any claims about causality for now—further research is needed, ideally leveraging additional datasets such as Data Commons7 and data on drug use, among others, to build a more comprehensive picture.\n\n\n\nFrom Insight to Action: Dillon County’s Poverty–Crime Overlap"
  },
  {
    "objectID": "projects/crime-and-poverty.html#footnotes",
    "href": "projects/crime-and-poverty.html#footnotes",
    "title": "Possible Relationship Between Poverty & Crime in Dillon County South Carolina",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nGupta, A. (2022, February 23). 10 Good and Bad Examples of Data Visualization · Polymer. Polymer. https://www.polymersearch.com/blog/10-good-and-bad-examples-of-data-visualization↩︎\nFederal Bureau of Investigation. (n.d.). FBI Crime Data API [Web service and data API]. U.S. Department of Justice. Retrieved October 5, 2025, from https://cde.ucr.cjis.gov/LATEST/webapp/#/pages/docApi U.S. Census Bureau. (n.d.). data.census.gov [Data portal]. Retrieved October 5, 2025, from https://data.census.gov/↩︎\nU.S. Census Bureau. (n.d.). data.census.gov [Data portal]. Retrieved October 5, 2025, from https://data.census.gov/↩︎\nDassanayake (2023). Example 2: Republican voting in 1976 by state [HTML file]. In Maps (maps (4).html). Retrieved from file:///Users/sean/Downloads/maps%20(4).html#example-2-republican-voting-in-1976-by-state↩︎\nhttps://www.wbtw.com/news/pee-dee/dillon-county/dillon-county-sheriff-talks-about-decreasing-crime-after-sleds-2023-report/↩︎\nhttps://wpde.com/news/local/violent-crime-rates-down-29-percent-in-dillon-county-says-sled-south-carolina-state-law-enforcement-division-statistics-murder-sexual-battery-robbery-aggravated-assault-breaking-entering-car-theft-larceny-arson-reduction-charges-investigations↩︎\nhttps://datacommons.org/place/geoId/45033↩︎"
  },
  {
    "objectID": "projects.html",
    "href": "projects.html",
    "title": "Projects",
    "section": "",
    "text": "Welcome! Explore featured work across Data Viz, AI/ML, IoT & Electronics, and Construction.\n\n\n\n\n\n\n\n\nNo matching items"
  }
]